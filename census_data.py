# -*- coding: utf-8 -*-
"""Census_Data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uBGHsZYPGSlXlrJb8fg8gkph_BSr0__S

###### Problem Statement:-


1.   Does Age of a person play a major role in class?
2.   Does education play a major role in class?
3.   What is the minimum level of education needed to a high class?
4.   Will marital status affect the class of a person?
5.   Will sex of a person determine his/her high class?

###### **Import the libraries**
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from matplotlib import rcParams
from IPython.display import display
from sklearn import preprocessing,tree
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier

"""###### **Import dataset**"""

df = pd.read_excel('census_data.xlsx')

"""###### **Show by default 5 records from dataset.**"""

print(df.head())

print(df.shape)                       #Checking how many (Rows, Columns) are present in data.
print(type(df))                       #checking class of dataset.
print(df.columns)                     #checking the data's columns name before modification
df.columns = df.columns.str.lower()   #editing all columns with lowercase string.                  
print(df.columns)                     #checking the data's columns name after modification

"""###### Let's drop some columns like -
###### 1. final-weight - seems exactly like Entry_ID column
###### 2. capital.gain - 90% of the values are 0
###### 3. capital.loss - same as above(95% of the values are 0)

"""

df=df[['age', 'workclass', 'education', 'education-num',
       'marital-status', 'occupation', 'relationship', 'race', 'sex',
       'hours-per-week', 'native-country','class']]

"""###### **Triming the whitesace**"""

df['workclass'] = df['workclass'].str.strip()    
df['education'] = df['education'].str.strip()  
df['marital-status'] = df['marital-status'].str.strip()  
df['occupation'] = df['occupation'].str.strip()  
df['relationship'] = df['relationship'].str.strip() 
df['race'] = df['race'].str.strip() 
df['sex'] = df['sex'].str.strip() 
df['class'] = df['class'].str.strip()  
df['native-country'] = df['native-country'].str.strip()

display(df.describe())     
display(df.info())

"""###### **Analysing the number of males and females%**"""

no_of_female = df[df['sex']=='Female'].count()['sex']
total_sex = df.count()['sex']
display('Female {}%'.format(round(no_of_female / total_sex * 100)))



no_of_male = df[df['sex']=='Male'].count()['sex']
total_sex = df.count()['sex']
display('Male {}%'.format(round(no_of_male / total_sex * 100)))

"""###### **Analysing the count of native-country**"""

df['native-country'].value_counts()

"""######  **1. Checking Missing Value and Impute it.**"""

df.replace({"?": np.nan}, inplace = True)  #Replace ? with np.nan. Here missing values encoded with the"?". 
print(df.head())

print(df.isna().sum())                     #count the number of missing values

df.workclass = df.workclass.fillna(df.workclass.mode()[0])
df.occupation = df.occupation.fillna(df.occupation.mode()[0])
df['native-country'] = df['native-country'].fillna(df['native-country'].mode()[0])  #imputation
print(df.isna().sum())

"""###### **2. Checking Outliers and Impute it.**"""

plt.rcParams['figure.figsize'] = (10,5)

col_list=['age','hours-per-week']

for i in range(2):
    plt.subplot(1,2,i+1)
    plt.boxplot(df[col_list[i]])
    plt.title(col_list[i])

plt.show()

from scipy.stats.mstats import winsorize
df["age"] = winsorize(df["age"],(0,0.15))
df["hours-per-week"]= winsorize(df["hours-per-week"],(0.12,0.18))

census_dataset=df.copy()
display(census_dataset.shape)

plt.rcParams['figure.figsize'] = (10,5)

col_list=['age','hours-per-week']

for i in range(2):
    plt.subplot(1,2,i+1)
    plt.boxplot(census_dataset[col_list[i]])
    plt.title(col_list[i])

plt.show()

"""###### **Feature Engineering**

###### **Binning**
"""

census_dataset['age-group'] = pd.cut(census_dataset['age'], bins=[15,24,64,90], 
                                     labels=["Youth(15-24)", "Adults(25-64)", "Seniors(65-90)"])
census_dataset['age-group'].value_counts()

married= ['Married-spouse-absent','Married-civ-spouse','Married-AF-spouse']
separated = ['Separated','Divorced']

#replace elements in list.
census_dataset['marital-status'].replace(to_replace = married ,value = 'Married',inplace = True)
census_dataset['marital-status'].replace(to_replace = separated,value = 'Separated',inplace = True)

census_dataset['marital-status'].value_counts()

census_dataset['education'].replace(['11th', '9th', '7th-8th', '5th-6th', '10th', '1st-4th', 'Preschool', '12th'],
                             'School', inplace = True)
census_dataset['education'].value_counts()

census_dataset['per-week-hours-group'] = pd.cut(census_dataset['hours-per-week'], bins = [1, 24, 48, 72, 96, 120], 
                                   labels = ['1-24 hrs', '25-48 hrs', '49-72 hrs', '73-96 hrs', '97-120 hrs'])
census_dataset['per-week-hours-group'].value_counts()

"""###### **Count Plots for categorical attributes**

###### **native-country,race,per-week-hours-group and occupation vs class**
"""

plt.figure(figsize=(25,7))

deg=["native-country","race","per-week-hours-group","occupation"]

for i in range(4):
    plt.subplot(1,4,i+1)
    sns.countplot(x=deg[i],data=census_dataset,hue='class')
    plt.xlabel(deg[i],color="darkorange",fontsize=18)
    plt.ylabel("Count",color="darkorange",fontsize=18)
    plt.yticks(fontsize=13)
    plt.xticks(rotation=90,fontsize=13)

plt.show()

"""###### **age-group,education,marital-status and workclass vs class**"""

plt.figure(figsize=(25,7))

deg=["age-group","education","workclass","marital-status"]

for i in range(4):
    plt.subplot(1,4,i+1)
    sns.countplot(x=deg[i],data=census_dataset,hue='class')
    plt.xlabel(deg[i],color="darkorange",fontsize=18)
    plt.ylabel("Count",color="darkorange",fontsize=18)
    plt.yticks(fontsize=13)
    plt.xticks(rotation=90,fontsize=13)

plt.show()

"""###### **In Above age-group charts**, 
1. People with age between 25 to 64 are more likely to fall into <=50k class category.

###### **In Above education charts**, 
1. People with HS-grad category is more likely to fall into <=50k class category and People with Bachelors category is more likely to fall into >50k class category.

###### **In Above workclass charts**, 
1. People working in private companies have high probability of under class <=50k and Every category of workclass comes under the <=50k rather than >50K.

###### **In Above marital-status charts**, 
1. People with Never-married category is more likely to fall into <=50k class category and People with married category is more likely to fall into >50k class category.


"""

plt.figure(figsize=(25,7))

deg=["workclass","sex","marital-status"]

for i in range(3):
    plt.subplot(1,3,i+1)
    sns.countplot(x=deg[i],data=census_dataset,hue='per-week-hours-group')
    plt.xlabel(deg[i],color="darkorange",fontsize=18)
    plt.ylabel("Count",color="darkorange",fontsize=18)
    plt.yticks(fontsize=13)
    plt.xticks(rotation=90,fontsize=13)

plt.show()

#census_dataset.to_excel("census_dataset.xlsx",index=False)

census_dataset.describe()

list=['age','education-num','hours-per-week']
plt.figure(figsize=(12,7))
sns.heatmap(df[list].corr(),annot=True, fmt = ".2f", cmap = "YlGnBu")
plt.title("Correlation Matrix",color="darkblue",fontsize=20)
plt.show()

X = census_dataset.drop(['class'], axis=1)
Y = census_dataset['class']
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.3, random_state = 0)
categorical = ['age-group', 'per-week-hours-group','workclass','education', 'marital-status', 'occupation', 'relationship','race', 'sex','native-country']
for feature in categorical:
        le = preprocessing.LabelEncoder()
        X_train[feature] = le.fit_transform(X_train[feature])
        X_test[feature] = le.transform(X_test[feature])


scaler = StandardScaler()
X_train = pd.DataFrame(scaler.fit_transform(X_train), columns = X.columns)
X_test = pd.DataFrame(scaler.transform(X_test), columns = X.columns)
display(X_train.head())

random_forest = RandomForestClassifier(n_estimators=100)
random_forest.fit(X_train, Y_train)

Y_prediction = random_forest.predict(X_test)

random_forest.score(X_train, Y_train)
acc_random_forest = round(random_forest.score(X_train, Y_train) * 100, 2)
display(acc_random_forest)

importances = pd.DataFrame({'feature':X_train.columns,'importance':np.round(random_forest.feature_importances_,3)})
importances = importances.sort_values('importance',ascending=False).set_index('feature')
importances.head(5)

"""###### Conclusion:


1.   Age of a person play a role because more the age, probability of getting   over 50K annual class will increase.
2.   Education play a major role in class, having higher education of Bachelors will increase the probability of getting >50K.
3.   For the better class, individuals with higher education.
4.   Marital-status play a important role in class. If a person is married, his/her probability of getting over 50K annual class will increase significantly.
5.  The sex doesn't play an important role. the most cases man and woman both have similar class if the other factors are same.


"""